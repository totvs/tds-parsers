
// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.3.1 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};

  const peg$startRuleFunctions: {[id: string]: any} = { start_program: peg$parsestart_program };
  let peg$startRuleFunction: () => any = peg$parsestart_program;

  const peg$c0 = function(p1: any): any { return ast("program").add(p1 || []) };
  const peg$c1 = function(l: any, p: any): any { return l.concat(p); };
  const peg$c2 = function(p: any): any { return p; };
  const peg$c3 = function(p: any): any { return [p]; };
  const peg$c4 = function(b: any, t: any, e: any): any { return ast("block", b).add(t).add(e) };
  const peg$c5 = function(b: any, t: any, e: any): any { return ast("block",b).add(t).add(e) };
  const peg$c6 = function(o: any, a: any, c: any): any { return ast("argumentList").add([o, a || [], c]) };
  const peg$c7 = function(k: any): any { return k;};
  const peg$c8 = function(c: any): any { return ast("comment", c) };
  const peg$c9 = peg$anyExpectation();
  const peg$c10 = function(c: any): any { return ast("blockComment", c) };
  const peg$c11 = function(w: any, c: any, n: any): any { return ast("endLine", [w, c, n]) };
  const peg$c12 = function(c: any): any { return ast("singleComment", c) };
  const peg$c13 = function(s: any): any {
        return ast("string", s);
      };
  const peg$c14 = /^[\-+]/;
  const peg$c15 = peg$classExpectation(["-", "+"], false, false);
  const peg$c16 = function(n: any): any { return ast("number", n); };
  const peg$c17 = "\\\"";
  const peg$c18 = peg$literalExpectation("\\\"", false);
  const peg$c19 = function(): any { return '\\"'};
  const peg$c20 = "\\'";
  const peg$c21 = peg$literalExpectation("\\'", false);
  const peg$c22 = function(): any { return "\\'"};
  const peg$c23 = /^[; \t]/;
  const peg$c24 = peg$classExpectation([";", " ", "\t"], false, false);
  const peg$c25 = function(s: any): any { return ast("whiteSpace", s) };
  const peg$c26 = "\n";
  const peg$c27 = peg$literalExpectation("\n", false);
  const peg$c28 = "\r";
  const peg$c29 = peg$literalExpectation("\r", false);
  const peg$c30 = "\r\n";
  const peg$c31 = peg$literalExpectation("\r\n", false);
  const peg$c32 = function(s: any): any { return ast("newLine", s) };
  const peg$c33 = /^[0-9]/;
  const peg$c34 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c35 = "\"";
  const peg$c36 = peg$literalExpectation("\"", false);
  const peg$c37 = "'";
  const peg$c38 = peg$literalExpectation("'", false);
  const peg$c39 = ".";
  const peg$c40 = peg$literalExpectation(".", false);
  const peg$c41 = function(i: any): any { return ast("identifier", i) };
  const peg$c42 = /^[a-zA-Z_]/;
  const peg$c43 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  const peg$c44 = /^[a-zA-Z_0-9]/;
  const peg$c45 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false);
  const peg$c46 = "true";
  const peg$c47 = peg$literalExpectation("true", true);
  const peg$c48 = function(c: any): any { return ast("constant", c) };
  const peg$c49 = "false";
  const peg$c50 = peg$literalExpectation("false", true);
  const peg$c51 = "int_flag";
  const peg$c52 = peg$literalExpectation("int_flag", true);
  const peg$c53 = function(v: any): any { return ast("builtInVar", v) };
  const peg$c54 = "notfound";
  const peg$c55 = peg$literalExpectation("notfound", true);
  const peg$c56 = "sqlcode";
  const peg$c57 = peg$literalExpectation("sqlcode", true);
  const peg$c58 = "status";
  const peg$c59 = peg$literalExpectation("status", true);
  const peg$c60 = "quit_flag";
  const peg$c61 = peg$literalExpectation("quit_flag", true);
  const peg$c62 = "sqlcarecord";
  const peg$c63 = peg$literalExpectation("sqlcarecord", true);
  const peg$c64 = "sqlerrm";
  const peg$c65 = peg$literalExpectation("sqlerrm", true);
  const peg$c66 = "sqlerrp";
  const peg$c67 = peg$literalExpectation("sqlerrp", true);
  const peg$c68 = "sqlerrd";
  const peg$c69 = peg$literalExpectation("sqlerrd", true);
  const peg$c70 = "sqlawarn";
  const peg$c71 = peg$literalExpectation("sqlawarn", true);
  const peg$c72 = "#";
  const peg$c73 = peg$literalExpectation("#", false);
  const peg$c74 = function(o: any): any { return ast("operator", o) };
  const peg$c75 = "@";
  const peg$c76 = peg$literalExpectation("@", false);
  const peg$c77 = "!";
  const peg$c78 = peg$literalExpectation("!", false);
  const peg$c79 = ":";
  const peg$c80 = peg$literalExpectation(":", false);
  const peg$c81 = "||";
  const peg$c82 = peg$literalExpectation("||", false);
  const peg$c83 = "{";
  const peg$c84 = peg$literalExpectation("{", false);
  const peg$c85 = function(o: any): any { return ast("operatorBraces", o) };
  const peg$c86 = "}";
  const peg$c87 = peg$literalExpectation("}", false);
  const peg$c88 = "[";
  const peg$c89 = peg$literalExpectation("[", false);
  const peg$c90 = function(o: any): any { return ast("operatorBracket", o) };
  const peg$c91 = "]";
  const peg$c92 = peg$literalExpectation("]", false);
  const peg$c93 = "(";
  const peg$c94 = peg$literalExpectation("(", false);
  const peg$c95 = function(o: any): any { return ast("operatorParenthesis", o) };
  const peg$c96 = ")";
  const peg$c97 = peg$literalExpectation(")", false);
  const peg$c98 = ",";
  const peg$c99 = peg$literalExpectation(",", false);
  const peg$c100 = function(o: any): any { return ast("operatorSeparator", o) };
  const peg$c101 = "*";
  const peg$c102 = peg$literalExpectation("*", false);
  const peg$c103 = function(o: any): any { return ast("operatorMath", o) };
  const peg$c104 = "=";
  const peg$c105 = peg$literalExpectation("=", false);
  const peg$c106 = "<";
  const peg$c107 = peg$literalExpectation("<", false);
  const peg$c108 = ">";
  const peg$c109 = peg$literalExpectation(">", false);
  const peg$c110 = "+";
  const peg$c111 = peg$literalExpectation("+", false);
  const peg$c112 = "-";
  const peg$c113 = peg$literalExpectation("-", false);
  const peg$c114 = "/";
  const peg$c115 = peg$literalExpectation("/", false);
  const peg$c116 = "accept";
  const peg$c117 = peg$literalExpectation("accept", true);
  const peg$c118 = function(k: any): any { return ast("keyword", k) };
  const peg$c119 = "after";
  const peg$c120 = peg$literalExpectation("after", true);
  const peg$c121 = "all";
  const peg$c122 = peg$literalExpectation("all", true);
  const peg$c123 = "and";
  const peg$c124 = peg$literalExpectation("and", true);
  const peg$c125 = "any";
  const peg$c126 = peg$literalExpectation("any", true);
  const peg$c127 = "array";
  const peg$c128 = peg$literalExpectation("array", true);
  const peg$c129 = "asc";
  const peg$c130 = peg$literalExpectation("asc", true);
  const peg$c131 = "ascending";
  const peg$c132 = peg$literalExpectation("ascending", true);
  const peg$c133 = "ascii";
  const peg$c134 = peg$literalExpectation("ascii", true);
  const peg$c135 = "year";
  const peg$c136 = peg$literalExpectation("year", true);
  const peg$c137 = "attribute";
  const peg$c138 = peg$literalExpectation("attribute", true);
  const peg$c139 = "attributes";
  const peg$c140 = peg$literalExpectation("attributes", true);
  const peg$c141 = "autonext";
  const peg$c142 = peg$literalExpectation("autonext", true);
  const peg$c143 = "avg";
  const peg$c144 = peg$literalExpectation("avg", true);
  const peg$c145 = "before";
  const peg$c146 = peg$literalExpectation("before", true);
  const peg$c147 = "begin";
  const peg$c148 = peg$literalExpectation("begin", true);
  const peg$c149 = "between";
  const peg$c150 = peg$literalExpectation("between", true);
  const peg$c151 = "bigint";
  const peg$c152 = peg$literalExpectation("bigint", true);
  const peg$c153 = "black";
  const peg$c154 = peg$literalExpectation("black", true);
  const peg$c155 = "blink";
  const peg$c156 = peg$literalExpectation("blink", true);
  const peg$c157 = "blue";
  const peg$c158 = peg$literalExpectation("blue", true);
  const peg$c159 = "bold";
  const peg$c160 = peg$literalExpectation("bold", true);
  const peg$c161 = "border";
  const peg$c162 = peg$literalExpectation("border", true);
  const peg$c163 = "bottom";
  const peg$c164 = peg$literalExpectation("bottom", true);
  const peg$c165 = "by";
  const peg$c166 = peg$literalExpectation("by", true);
  const peg$c167 = "byte";
  const peg$c168 = peg$literalExpectation("byte", true);
  const peg$c169 = "call";
  const peg$c170 = peg$literalExpectation("call", true);
  const peg$c171 = "case";
  const peg$c172 = peg$literalExpectation("case", true);
  const peg$c173 = "char";
  const peg$c174 = peg$literalExpectation("char", true);
  const peg$c175 = "character";
  const peg$c176 = peg$literalExpectation("character", true);
  const peg$c177 = "clear";
  const peg$c178 = peg$literalExpectation("clear", true);
  const peg$c179 = "clipped";
  const peg$c180 = peg$literalExpectation("clipped", true);
  const peg$c181 = "close";
  const peg$c182 = peg$literalExpectation("close", true);
  const peg$c183 = "column";
  const peg$c184 = peg$literalExpectation("column", true);
  const peg$c185 = "columns";
  const peg$c186 = peg$literalExpectation("columns", true);
  const peg$c187 = "command";
  const peg$c188 = peg$literalExpectation("command", true);
  const peg$c189 = "comment";
  const peg$c190 = peg$literalExpectation("comment", true);
  const peg$c191 = "comments";
  const peg$c192 = peg$literalExpectation("comments", true);
  const peg$c193 = "commit";
  const peg$c194 = peg$literalExpectation("commit", true);
  const peg$c195 = "constraint";
  const peg$c196 = peg$literalExpectation("constraint", true);
  const peg$c197 = "construct";
  const peg$c198 = peg$literalExpectation("construct", true);
  const peg$c199 = "continue";
  const peg$c200 = peg$literalExpectation("continue", true);
  const peg$c201 = "control";
  const peg$c202 = peg$literalExpectation("control", true);
  const peg$c203 = "count";
  const peg$c204 = peg$literalExpectation("count", true);
  const peg$c205 = "create";
  const peg$c206 = peg$literalExpectation("create", true);
  const peg$c207 = "current";
  const peg$c208 = peg$literalExpectation("current", true);
  const peg$c209 = "cursor";
  const peg$c210 = peg$literalExpectation("cursor", true);
  const peg$c211 = "cyan";
  const peg$c212 = peg$literalExpectation("cyan", true);
  const peg$c213 = "database";
  const peg$c214 = peg$literalExpectation("database", true);
  const peg$c215 = "date";
  const peg$c216 = peg$literalExpectation("date", true);
  const peg$c217 = "datetime";
  const peg$c218 = peg$literalExpectation("datetime", true);
  const peg$c219 = "day";
  const peg$c220 = peg$literalExpectation("day", true);
  const peg$c221 = "dec";
  const peg$c222 = peg$literalExpectation("dec", true);
  const peg$c223 = "decimal";
  const peg$c224 = peg$literalExpectation("decimal", true);
  const peg$c225 = "declare";
  const peg$c226 = peg$literalExpectation("declare", true);
  const peg$c227 = "defaults";
  const peg$c228 = peg$literalExpectation("defaults", true);
  const peg$c229 = "defer";
  const peg$c230 = peg$literalExpectation("defer", true);
  const peg$c231 = "define";
  const peg$c232 = peg$literalExpectation("define", true);
  const peg$c233 = "delete";
  const peg$c234 = peg$literalExpectation("delete", true);
  const peg$c235 = "delimiter";
  const peg$c236 = peg$literalExpectation("delimiter", true);
  const peg$c237 = "delimiters";
  const peg$c238 = peg$literalExpectation("delimiters", true);
  const peg$c239 = "desc";
  const peg$c240 = peg$literalExpectation("desc", true);
  const peg$c241 = "descending";
  const peg$c242 = peg$literalExpectation("descending", true);
  const peg$c243 = "dim";
  const peg$c244 = peg$literalExpectation("dim", true);
  const peg$c245 = "dirty";
  const peg$c246 = peg$literalExpectation("dirty", true);
  const peg$c247 = "display";
  const peg$c248 = peg$literalExpectation("display", true);
  const peg$c249 = "distinct";
  const peg$c250 = peg$literalExpectation("distinct", true);
  const peg$c251 = "double";
  const peg$c252 = peg$literalExpectation("double", true);
  const peg$c253 = "down";
  const peg$c254 = peg$literalExpectation("down", true);
  const peg$c255 = "downshift";
  const peg$c256 = peg$literalExpectation("downshift", true);
  const peg$c257 = "drop";
  const peg$c258 = peg$literalExpectation("drop", true);
  const peg$c259 = "dynamic";
  const peg$c260 = peg$literalExpectation("dynamic", true);
  const peg$c261 = "elif";
  const peg$c262 = peg$literalExpectation("elif", true);
  const peg$c263 = "else";
  const peg$c264 = peg$literalExpectation("else", true);
  const peg$c265 = "end";
  const peg$c266 = peg$literalExpectation("end", true);
  const peg$c267 = "error";
  const peg$c268 = peg$literalExpectation("error", true);
  const peg$c269 = "escape";
  const peg$c270 = peg$literalExpectation("escape", true);
  const peg$c271 = "every";
  const peg$c272 = peg$literalExpectation("every", true);
  const peg$c273 = "exclusive";
  const peg$c274 = peg$literalExpectation("exclusive", true);
  const peg$c275 = "execute";
  const peg$c276 = peg$literalExpectation("execute", true);
  const peg$c277 = "exists";
  const peg$c278 = peg$literalExpectation("exists", true);
  const peg$c279 = "exit";
  const peg$c280 = peg$literalExpectation("exit", true);
  const peg$c281 = "extend";
  const peg$c282 = peg$literalExpectation("extend", true);
  const peg$c283 = "external";
  const peg$c284 = peg$literalExpectation("external", true);
  const peg$c285 = "fetch";
  const peg$c286 = peg$literalExpectation("fetch", true);
  const peg$c287 = "field";
  const peg$c288 = peg$literalExpectation("field", true);
  const peg$c289 = "file";
  const peg$c290 = peg$literalExpectation("file", true);
  const peg$c291 = "finish";
  const peg$c292 = peg$literalExpectation("finish", true);
  const peg$c293 = "first";
  const peg$c294 = peg$literalExpectation("first", true);
  const peg$c295 = "float";
  const peg$c296 = peg$literalExpectation("float", true);
  const peg$c297 = "flush";
  const peg$c298 = peg$literalExpectation("flush", true);
  const peg$c299 = "for";
  const peg$c300 = peg$literalExpectation("for", true);
  const peg$c301 = "foreach";
  const peg$c302 = peg$literalExpectation("foreach", true);
  const peg$c303 = "form";
  const peg$c304 = peg$literalExpectation("form", true);
  const peg$c305 = "format";
  const peg$c306 = peg$literalExpectation("format", true);
  const peg$c307 = "formonly";
  const peg$c308 = peg$literalExpectation("formonly", true);
  const peg$c309 = "found";
  const peg$c310 = peg$literalExpectation("found", true);
  const peg$c311 = "fraction";
  const peg$c312 = peg$literalExpectation("fraction", true);
  const peg$c313 = "free";
  const peg$c314 = peg$literalExpectation("free", true);
  const peg$c315 = "from";
  const peg$c316 = peg$literalExpectation("from", true);
  const peg$c317 = "function";
  const peg$c318 = peg$literalExpectation("function", true);
  const peg$c319 = "globals";
  const peg$c320 = peg$literalExpectation("globals", true);
  const peg$c321 = "go";
  const peg$c322 = peg$literalExpectation("go", true);
  const peg$c323 = "goto";
  const peg$c324 = peg$literalExpectation("goto", true);
  const peg$c325 = "green";
  const peg$c326 = peg$literalExpectation("green", true);
  const peg$c327 = "group";
  const peg$c328 = peg$literalExpectation("group", true);
  const peg$c329 = "having";
  const peg$c330 = peg$literalExpectation("having", true);
  const peg$c331 = "header";
  const peg$c332 = peg$literalExpectation("header", true);
  const peg$c333 = "help";
  const peg$c334 = peg$literalExpectation("help", true);
  const peg$c335 = "hide";
  const peg$c336 = peg$literalExpectation("hide", true);
  const peg$c337 = "hold";
  const peg$c338 = peg$literalExpectation("hold", true);
  const peg$c339 = "hour";
  const peg$c340 = peg$literalExpectation("hour", true);
  const peg$c341 = "if";
  const peg$c342 = peg$literalExpectation("if", true);
  const peg$c343 = "in";
  const peg$c344 = peg$literalExpectation("in", true);
  const peg$c345 = "include";
  const peg$c346 = peg$literalExpectation("include", true);
  const peg$c347 = "index";
  const peg$c348 = peg$literalExpectation("index", true);
  const peg$c349 = "initialize";
  const peg$c350 = peg$literalExpectation("initialize", true);
  const peg$c351 = "input";
  const peg$c352 = peg$literalExpectation("input", true);
  const peg$c353 = "insert";
  const peg$c354 = peg$literalExpectation("insert", true);
  const peg$c355 = "instructions";
  const peg$c356 = peg$literalExpectation("instructions", true);
  const peg$c357 = "int";
  const peg$c358 = peg$literalExpectation("int", true);
  const peg$c359 = "integer";
  const peg$c360 = peg$literalExpectation("integer", true);
  const peg$c361 = "interrupt";
  const peg$c362 = peg$literalExpectation("interrupt", true);
  const peg$c363 = "interval";
  const peg$c364 = peg$literalExpectation("interval", true);
  const peg$c365 = "into";
  const peg$c366 = peg$literalExpectation("into", true);
  const peg$c367 = "invisible";
  const peg$c368 = peg$literalExpectation("invisible", true);
  const peg$c369 = "is";
  const peg$c370 = peg$literalExpectation("is", true);
  const peg$c371 = "isolation";
  const peg$c372 = peg$literalExpectation("isolation", true);
  const peg$c373 = "key";
  const peg$c374 = peg$literalExpectation("key", true);
  const peg$c375 = "label";
  const peg$c376 = peg$literalExpectation("label", true);
  const peg$c377 = "last";
  const peg$c378 = peg$literalExpectation("last", true);
  const peg$c379 = "left";
  const peg$c380 = peg$literalExpectation("left", true);
  const peg$c381 = "length";
  const peg$c382 = peg$literalExpectation("length", true);
  const peg$c383 = "let";
  const peg$c384 = peg$literalExpectation("let", true);
  const peg$c385 = "like";
  const peg$c386 = peg$literalExpectation("like", true);
  const peg$c387 = "line";
  const peg$c388 = peg$literalExpectation("line", true);
  const peg$c389 = "lines";
  const peg$c390 = peg$literalExpectation("lines", true);
  const peg$c391 = "load";
  const peg$c392 = peg$literalExpectation("load", true);
  const peg$c393 = "locate";
  const peg$c394 = peg$literalExpectation("locate", true);
  const peg$c395 = "lock";
  const peg$c396 = peg$literalExpectation("lock", true);
  const peg$c397 = "log";
  const peg$c398 = peg$literalExpectation("log", true);
  const peg$c399 = "magenta";
  const peg$c400 = peg$literalExpectation("magenta", true);
  const peg$c401 = "main";
  const peg$c402 = peg$literalExpectation("main", true);
  const peg$c403 = "margin";
  const peg$c404 = peg$literalExpectation("margin", true);
  const peg$c405 = "matches";
  const peg$c406 = peg$literalExpectation("matches", true);
  const peg$c407 = "max";
  const peg$c408 = peg$literalExpectation("max", true);
  const peg$c409 = "mdy";
  const peg$c410 = peg$literalExpectation("mdy", true);
  const peg$c411 = "memory";
  const peg$c412 = peg$literalExpectation("memory", true);
  const peg$c413 = "menu";
  const peg$c414 = peg$literalExpectation("menu", true);
  const peg$c415 = "message";
  const peg$c416 = peg$literalExpectation("message", true);
  const peg$c417 = "min";
  const peg$c418 = peg$literalExpectation("min", true);
  const peg$c419 = "minute";
  const peg$c420 = peg$literalExpectation("minute", true);
  const peg$c421 = "mod";
  const peg$c422 = peg$literalExpectation("mod", true);
  const peg$c423 = "mode";
  const peg$c424 = peg$literalExpectation("mode", true);
  const peg$c425 = "money";
  const peg$c426 = peg$literalExpectation("money", true);
  const peg$c427 = "month";
  const peg$c428 = peg$literalExpectation("month", true);
  const peg$c429 = "name";
  const peg$c430 = peg$literalExpectation("name", true);
  const peg$c431 = "nchar";
  const peg$c432 = peg$literalExpectation("nchar", true);
  const peg$c433 = "need";
  const peg$c434 = peg$literalExpectation("need", true);
  const peg$c435 = "next";
  const peg$c436 = peg$literalExpectation("next", true);
  const peg$c437 = "no";
  const peg$c438 = peg$literalExpectation("no", true);
  const peg$c439 = "noentry";
  const peg$c440 = peg$literalExpectation("noentry", true);
  const peg$c441 = "normal";
  const peg$c442 = peg$literalExpectation("normal", true);
  const peg$c443 = "not";
  const peg$c444 = peg$literalExpectation("not", true);
  const peg$c445 = "null";
  const peg$c446 = peg$literalExpectation("null", true);
  const peg$c447 = "numeric";
  const peg$c448 = peg$literalExpectation("numeric", true);
  const peg$c449 = "nvarchar";
  const peg$c450 = peg$literalExpectation("nvarchar", true);
  const peg$c451 = "of";
  const peg$c452 = peg$literalExpectation("of", true);
  const peg$c453 = "off";
  const peg$c454 = peg$literalExpectation("off", true);
  const peg$c455 = "on";
  const peg$c456 = peg$literalExpectation("on", true);
  const peg$c457 = "open";
  const peg$c458 = peg$literalExpectation("open", true);
  const peg$c459 = "option";
  const peg$c460 = peg$literalExpectation("option", true);
  const peg$c461 = "options";
  const peg$c462 = peg$literalExpectation("options", true);
  const peg$c463 = "or";
  const peg$c464 = peg$literalExpectation("or", true);
  const peg$c465 = "order";
  const peg$c466 = peg$literalExpectation("order", true);
  const peg$c467 = "otherwise";
  const peg$c468 = peg$literalExpectation("otherwise", true);
  const peg$c469 = "outer";
  const peg$c470 = peg$literalExpectation("outer", true);
  const peg$c471 = "output";
  const peg$c472 = peg$literalExpectation("output", true);
  const peg$c473 = "page";
  const peg$c474 = peg$literalExpectation("page", true);
  const peg$c475 = "pageno";
  const peg$c476 = peg$literalExpectation("pageno", true);
  const peg$c477 = "pipe";
  const peg$c478 = peg$literalExpectation("pipe", true);
  const peg$c479 = "precision";
  const peg$c480 = peg$literalExpectation("precision", true);
  const peg$c481 = "prepare";
  const peg$c482 = peg$literalExpectation("prepare", true);
  const peg$c483 = "previous";
  const peg$c484 = peg$literalExpectation("previous", true);
  const peg$c485 = "primary";
  const peg$c486 = peg$literalExpectation("primary", true);
  const peg$c487 = "print";
  const peg$c488 = peg$literalExpectation("print", true);
  const peg$c489 = "program";
  const peg$c490 = peg$literalExpectation("program", true);
  const peg$c491 = "prompt";
  const peg$c492 = peg$literalExpectation("prompt", true);
  const peg$c493 = "put";
  const peg$c494 = peg$literalExpectation("put", true);
  const peg$c495 = "quit";
  const peg$c496 = peg$literalExpectation("quit", true);
  const peg$c497 = "read";
  const peg$c498 = peg$literalExpectation("read", true);
  const peg$c499 = "real";
  const peg$c500 = peg$literalExpectation("real", true);
  const peg$c501 = "record";
  const peg$c502 = peg$literalExpectation("record", true);
  const peg$c503 = "red";
  const peg$c504 = peg$literalExpectation("red", true);
  const peg$c505 = "report";
  const peg$c506 = peg$literalExpectation("report", true);
  const peg$c507 = "return";
  const peg$c508 = peg$literalExpectation("return", true);
  const peg$c509 = "returning";
  const peg$c510 = peg$literalExpectation("returning", true);
  const peg$c511 = "reverse";
  const peg$c512 = peg$literalExpectation("reverse", true);
  const peg$c513 = "rigth";
  const peg$c514 = peg$literalExpectation("rigth", true);
  const peg$c515 = "rollback";
  const peg$c516 = peg$literalExpectation("rollback", true);
  const peg$c517 = "row";
  const peg$c518 = peg$literalExpectation("row", true);
  const peg$c519 = "rows";
  const peg$c520 = peg$literalExpectation("rows", true);
  const peg$c521 = "run";
  const peg$c522 = peg$literalExpectation("run", true);
  const peg$c523 = "screen";
  const peg$c524 = peg$literalExpectation("screen", true);
  const peg$c525 = "scroll";
  const peg$c526 = peg$literalExpectation("scroll", true);
  const peg$c527 = "second";
  const peg$c528 = peg$literalExpectation("second", true);
  const peg$c529 = "select";
  const peg$c530 = peg$literalExpectation("select", true);
  const peg$c531 = "set";
  const peg$c532 = peg$literalExpectation("set", true);
  const peg$c533 = "share";
  const peg$c534 = peg$literalExpectation("share", true);
  const peg$c535 = "show";
  const peg$c536 = peg$literalExpectation("show", true);
  const peg$c537 = "skip";
  const peg$c538 = peg$literalExpectation("skip", true);
  const peg$c539 = "sleep";
  const peg$c540 = peg$literalExpectation("sleep", true);
  const peg$c541 = "small";
  const peg$c542 = peg$literalExpectation("small", true);
  const peg$c543 = "smallfloat";
  const peg$c544 = peg$literalExpectation("smallfloat", true);
  const peg$c545 = "smallint";
  const peg$c546 = peg$literalExpectation("smallint", true);
  const peg$c547 = "space";
  const peg$c548 = peg$literalExpectation("space", true);
  const peg$c549 = "spaces";
  const peg$c550 = peg$literalExpectation("spaces", true);
  const peg$c551 = "sql";
  const peg$c552 = peg$literalExpectation("sql", true);
  const peg$c553 = "sqlerror";
  const peg$c554 = peg$literalExpectation("sqlerror", true);
  const peg$c555 = "sqlwarning";
  const peg$c556 = peg$literalExpectation("sqlwarning", true);
  const peg$c557 = "start";
  const peg$c558 = peg$literalExpectation("start", true);
  const peg$c559 = "step";
  const peg$c560 = peg$literalExpectation("step", true);
  const peg$c561 = "stop";
  const peg$c562 = peg$literalExpectation("stop", true);
  const peg$c563 = "string";
  const peg$c564 = peg$literalExpectation("string", true);
  const peg$c565 = "sum";
  const peg$c566 = peg$literalExpectation("sum", true);
  const peg$c567 = "table";
  const peg$c568 = peg$literalExpectation("table", true);
  const peg$c569 = "tables";
  const peg$c570 = peg$literalExpectation("tables", true);
  const peg$c571 = "temp";
  const peg$c572 = peg$literalExpectation("temp", true);
  const peg$c573 = "text";
  const peg$c574 = peg$literalExpectation("text", true);
  const peg$c575 = "then";
  const peg$c576 = peg$literalExpectation("then", true);
  const peg$c577 = "through";
  const peg$c578 = peg$literalExpectation("through", true);
  const peg$c579 = "thru";
  const peg$c580 = peg$literalExpectation("thru", true);
  const peg$c581 = "time";
  const peg$c582 = peg$literalExpectation("time", true);
  const peg$c583 = "to";
  const peg$c584 = peg$literalExpectation("to", true);
  const peg$c585 = "today";
  const peg$c586 = peg$literalExpectation("today", true);
  const peg$c587 = "top";
  const peg$c588 = peg$literalExpectation("top", true);
  const peg$c589 = "trailer";
  const peg$c590 = peg$literalExpectation("trailer", true);
  const peg$c591 = "type";
  const peg$c592 = peg$literalExpectation("type", true);
  const peg$c593 = "unconstrained";
  const peg$c594 = peg$literalExpectation("unconstrained", true);
  const peg$c595 = "underline";
  const peg$c596 = peg$literalExpectation("underline", true);
  const peg$c597 = "union";
  const peg$c598 = peg$literalExpectation("union", true);
  const peg$c599 = "unique";
  const peg$c600 = peg$literalExpectation("unique", true);
  const peg$c601 = "units";
  const peg$c602 = peg$literalExpectation("units", true);
  const peg$c603 = "unload";
  const peg$c604 = peg$literalExpectation("unload", true);
  const peg$c605 = "unlock";
  const peg$c606 = peg$literalExpectation("unlock", true);
  const peg$c607 = "up";
  const peg$c608 = peg$literalExpectation("up", true);
  const peg$c609 = "update";
  const peg$c610 = peg$literalExpectation("update", true);
  const peg$c611 = "upshift";
  const peg$c612 = peg$literalExpectation("upshift", true);
  const peg$c613 = "using";
  const peg$c614 = peg$literalExpectation("using", true);
  const peg$c615 = "validate";
  const peg$c616 = peg$literalExpectation("validate", true);
  const peg$c617 = "values";
  const peg$c618 = peg$literalExpectation("values", true);
  const peg$c619 = "varchar";
  const peg$c620 = peg$literalExpectation("varchar", true);
  const peg$c621 = "wait";
  const peg$c622 = peg$literalExpectation("wait", true);
  const peg$c623 = "waiting";
  const peg$c624 = peg$literalExpectation("waiting", true);
  const peg$c625 = "warning";
  const peg$c626 = peg$literalExpectation("warning", true);
  const peg$c627 = "weekday";
  const peg$c628 = peg$literalExpectation("weekday", true);
  const peg$c629 = "when";
  const peg$c630 = peg$literalExpectation("when", true);
  const peg$c631 = "whenever";
  const peg$c632 = peg$literalExpectation("whenever", true);
  const peg$c633 = "where";
  const peg$c634 = peg$literalExpectation("where", true);
  const peg$c635 = "while";
  const peg$c636 = peg$literalExpectation("while", true);
  const peg$c637 = "white";
  const peg$c638 = peg$literalExpectation("white", true);
  const peg$c639 = "window";
  const peg$c640 = peg$literalExpectation("window", true);
  const peg$c641 = "with";
  const peg$c642 = peg$literalExpectation("with", true);
  const peg$c643 = "without";
  const peg$c644 = peg$literalExpectation("without", true);
  const peg$c645 = "wordwrap";
  const peg$c646 = peg$literalExpectation("wordwrap", true);
  const peg$c647 = "work";
  const peg$c648 = peg$literalExpectation("work", true);
  const peg$c649 = "wrap";
  const peg$c650 = peg$literalExpectation("wrap", true);
  const peg$c651 = "yellow";
  const peg$c652 = peg$literalExpectation("yellow", true);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart_program(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesuperTokens();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesuperTokens(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesuperToken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesuperToken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesuperTokens();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesuperTokens();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsesuperToken();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsesuperToken();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesuperToken();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsesuperToken(): any {
    let s0;

    s0 = peg$parseWS_NL();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemoduleBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$parseglobalBlock();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemainBlock();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefunctionBlock();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseglobalBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseGLOBALS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS_NL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestring();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseendLine();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseGLOBALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseendLine();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsetokens();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsetokens();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseEND();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS_NL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseGLOBALS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseendLine();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemoduleBlock(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDEFINE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDATABASE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS_NL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifer();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemainBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMAIN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseendLine();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseMAIN();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseFUNCTION();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseWS_NL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseidentifer();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseargumentList();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6, s7];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFUNCTION();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseforBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFOR();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFOR();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseforEachBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFOREACH();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFOREACH();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecordBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseRECORD();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseRECORD();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseWS();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCOMMA();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIF();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetokens();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetokens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS_NL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIF();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseendLine();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseargumentList(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseO_PARENTHESIS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS_NL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseC_PARENTHESIS();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearguments(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsearg_list();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsearg_list();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsearg_value();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsearg_value();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsearg_list();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsearg_list();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsearg_value();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsearg_list(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWS_NL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifer();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS_NL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMA();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS_NL();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearg_value(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseWS_NL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifer();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS_NL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokens(): any {
    let s0, s1, s2;

    s0 = peg$parseWS_NL();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekeywords();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebuiltInVar();
          if (s0 === peg$FAILED) {
            s0 = peg$parseoperators();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestring();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenumber();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseforBlock();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseforEachBlock();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseifBlock();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parserecordBlock();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$currPos;
                          peg$silentFails++;
                          s2 = peg$parseEND();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseTHEN();
                          }
                          peg$silentFails--;
                          if (s2 === peg$FAILED) {
                            s1 = undefined;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseidentifer();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsekeywords(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseACCEPT();
    if (s1 === peg$FAILED) {
      s1 = peg$parseAFTER();
      if (s1 === peg$FAILED) {
        s1 = peg$parseALL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAND();
          if (s1 === peg$FAILED) {
            s1 = peg$parseANY();
            if (s1 === peg$FAILED) {
              s1 = peg$parseARRAY();
              if (s1 === peg$FAILED) {
                s1 = peg$parseASC();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseASCENDING();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseASCII();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseAT();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseATTRIBUTE();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseATTRIBUTES();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseAUTONEXT();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseAVG();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseBEFORE();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseBEGIN();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseBETWEEN();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseBIGINT();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseBLACK();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parseBLINK();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseBLUE();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseBOLD();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parseBORDER();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseBOTTOM();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parseBY();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseBYTE();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parseCALL();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseCASE();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parseCHAR();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseCHARACTER();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseCLEAR();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseCLIPPED();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseCLOSE();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseCOLUMN();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseCOLUMNS();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseCOMMAND();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parseCOMMENT();
                                                                            if (s1 === peg$FAILED) {
                                                                              s1 = peg$parseCOMMENTS();
                                                                              if (s1 === peg$FAILED) {
                                                                                s1 = peg$parseCOMMIT();
                                                                                if (s1 === peg$FAILED) {
                                                                                  s1 = peg$parseCONSTRAINT();
                                                                                  if (s1 === peg$FAILED) {
                                                                                    s1 = peg$parseCONSTRUCT();
                                                                                    if (s1 === peg$FAILED) {
                                                                                      s1 = peg$parseCONTINUE();
                                                                                      if (s1 === peg$FAILED) {
                                                                                        s1 = peg$parseCONTROL();
                                                                                        if (s1 === peg$FAILED) {
                                                                                          s1 = peg$parseCOUNT();
                                                                                          if (s1 === peg$FAILED) {
                                                                                            s1 = peg$parseCREATE();
                                                                                            if (s1 === peg$FAILED) {
                                                                                              s1 = peg$parseCURRENT();
                                                                                              if (s1 === peg$FAILED) {
                                                                                                s1 = peg$parseCURSOR();
                                                                                                if (s1 === peg$FAILED) {
                                                                                                  s1 = peg$parseCYAN();
                                                                                                  if (s1 === peg$FAILED) {
                                                                                                    s1 = peg$parseDATE();
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                      s1 = peg$parseDATETIME();
                                                                                                      if (s1 === peg$FAILED) {
                                                                                                        s1 = peg$parseDAY();
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                          s1 = peg$parseDEC();
                                                                                                          if (s1 === peg$FAILED) {
                                                                                                            s1 = peg$parseDECIMAL();
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                              s1 = peg$parseDECLARE();
                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                s1 = peg$parseDEFAULTS();
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                  s1 = peg$parseDEFER();
                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                    s1 = peg$parseDEFINE();
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                      s1 = peg$parseDELETE();
                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                        s1 = peg$parseDELIMITER();
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                          s1 = peg$parseDELIMITERS();
                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                            s1 = peg$parseDESC();
                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                              s1 = peg$parseDESCENDING();
                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                s1 = peg$parseDIM();
                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                  s1 = peg$parseDIRTY();
                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                    s1 = peg$parseDISPLAY();
                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                      s1 = peg$parseDISTINCT();
                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                        s1 = peg$parseDOUBLE();
                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                          s1 = peg$parseDOWN();
                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                            s1 = peg$parseDOWNSHIFT();
                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                              s1 = peg$parseDROP();
                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                s1 = peg$parseDYNAMIC();
                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                  s1 = peg$parseELIF();
                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                    s1 = peg$parseELSE();
                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                      s1 = peg$parseERROR();
                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                        s1 = peg$parseESCAPE();
                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                          s1 = peg$parseEVERY();
                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                            s1 = peg$parseEXCLUSIVE();
                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                              s1 = peg$parseEXECUTE();
                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                s1 = peg$parseEXISTS();
                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                  s1 = peg$parseEXIT();
                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                    s1 = peg$parseEXTEND();
                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                      s1 = peg$parseEXTERNAL();
                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                        s1 = peg$parseFETCH();
                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                          s1 = peg$parseFIELD();
                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                            s1 = peg$parseFILE();
                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                              s1 = peg$parseFINISH();
                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                s1 = peg$parseFIRST();
                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                  s1 = peg$parseFLOAT();
                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                    s1 = peg$parseFLUSH();
                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                      s1 = peg$parseFORM();
                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                        s1 = peg$parseFORMAT();
                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                          s1 = peg$parseFORMONLY();
                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                            s1 = peg$parseFOUND();
                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                              s1 = peg$parseFRACTION();
                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                s1 = peg$parseFREE();
                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                  s1 = peg$parseFROM();
                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                    s1 = peg$parseGO();
                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                      s1 = peg$parseGOTO();
                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                        s1 = peg$parseGREEN();
                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                          s1 = peg$parseGROUP();
                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                            s1 = peg$parseHAVING();
                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                              s1 = peg$parseHEADER();
                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                s1 = peg$parseHELP();
                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                  s1 = peg$parseHIDE();
                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                    s1 = peg$parseHOLD();
                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                      s1 = peg$parseHOUR();
                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                        s1 = peg$parseIN();
                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                          s1 = peg$parseINCLUDE();
                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                            s1 = peg$parseINDEX();
                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                              s1 = peg$parseINITIALIZE();
                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                s1 = peg$parseINPUT();
                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                  s1 = peg$parseINSERT();
                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                    s1 = peg$parseINSTRUCTIONS();
                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                      s1 = peg$parseINT();
                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                        s1 = peg$parseINTEGER();
                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                          s1 = peg$parseINTERRUPT();
                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                            s1 = peg$parseINTERVAL();
                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                              s1 = peg$parseINTO();
                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                s1 = peg$parseINVISIBLE();
                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                  s1 = peg$parseIS();
                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                    s1 = peg$parseISOLATION();
                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                      s1 = peg$parseKEY();
                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                        s1 = peg$parseLABEL();
                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                          s1 = peg$parseLAST();
                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                            s1 = peg$parseLEFT();
                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                              s1 = peg$parseLENGTH();
                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                s1 = peg$parseLET();
                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s1 = peg$parseLIKE();
                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s1 = peg$parseLINE();
                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s1 = peg$parseLINES();
                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s1 = peg$parseLOAD();
                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s1 = peg$parseLOCATE();
                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s1 = peg$parseLOCK();
                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s1 = peg$parseLOG();
                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s1 = peg$parseMAGENTA();
                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s1 = peg$parseMAIN();
                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s1 = peg$parseMARGIN();
                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s1 = peg$parseMATCHES();
                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s1 = peg$parseMAX();
                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s1 = peg$parseMDY();
                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s1 = peg$parseMEMORY();
                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s1 = peg$parseMENU();
                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s1 = peg$parseMESSAGE();
                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s1 = peg$parseMIN();
                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s1 = peg$parseMINUTE();
                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s1 = peg$parseMOD();
                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s1 = peg$parseMODE();
                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s1 = peg$parseMONEY();
                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s1 = peg$parseMONTH();
                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s1 = peg$parseNAME();
                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s1 = peg$parseNCHAR();
                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s1 = peg$parseNEED();
                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s1 = peg$parseNEXT();
                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s1 = peg$parseNO();
                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s1 = peg$parseNOENTRY();
                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s1 = peg$parseNORMAL();
                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s1 = peg$parseNOT();
                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s1 = peg$parseNOTFOUND();
                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s1 = peg$parseNULL();
                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseNUMERIC();
                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseNVARCHAR();
                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseOF();
                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseOFF();
                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseON();
                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseOPEN();
                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseOPTION();
                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseOPTIONS();
                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseOR();
                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseORDER();
                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseOTHERWISE();
                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseOUTER();
                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseOUTPUT();
                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parsePAGE();
                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parsePAGENO();
                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parsePIPE();
                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parsePRECISION();
                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parsePREPARE();
                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parsePREVIOUS();
                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parsePRIMARY();
                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parsePRINT();
                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parsePROGRAM();
                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parsePROMPT();
                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parsePUT();
                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseQUIT();
                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseREAD();
                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseREAL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseRED();
                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseREPORT();
                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseRETURN();
                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseRETURNING();
                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseREVERSE();
                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseRIGTH();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseROLLBACK();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseROW();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseROWS();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseRUN();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseSCREEN();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseSCROLL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseSECOND();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseSELECT();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseSET();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseSHARE();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseSHOW();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseSKIP();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseSLEEP();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseSMALL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseSMALLFLOAT();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseSMALLINT();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseSPACE();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseSPACES();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseSQL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseSQLERROR();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseSQLWARNING();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseSTART();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseSTEP();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseSTOP();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseSTRING();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseSUM();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseTABLE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseTABLES();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseTEMP();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseTEXT();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseTHEN();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseTHROUGH();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseTHRU();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseTIME();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseTO();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseTODAY();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseTOP();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseTRAILER();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseTYPE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseUNCONSTRAINED();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseUNDERLINE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseUNION();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseUNIQUE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseUNITS();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseUNLOAD();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseUNLOCK();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseUP();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseUPDATE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseUPSHIFT();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s1 = peg$parseUSING();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s1 = peg$parseVALIDATE();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s1 = peg$parseVALUES();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s1 = peg$parseVARCHAR();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s1 = peg$parseWAIT();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1 = peg$parseWAITING();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1 = peg$parseWARNING();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1 = peg$parseWEEKDAY();
if (s1 === peg$FAILED) {
s1 = peg$parseWHEN();
if (s1 === peg$FAILED) {
s1 = peg$parseWHENEVER();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
s1 = peg$parseWHERE();
if (s1 === peg$FAILED) {
s1 = peg$parseWHILE();
if (s1 === peg$FAILED) {
s1 = peg$parseWHITE();
if (s1 === peg$FAILED) {
s1 = peg$parseWINDOW();
if (s1 === peg$FAILED) {
s1 = peg$parseWITH();
if (s1 === peg$FAILED) {
s1 = peg$parseWITHOUT();
if (s1 === peg$FAILED) {
s1 = peg$parseWORDWRAP();
if (s1 === peg$FAILED) {
s1 = peg$parseWORK();
if (s1 === peg$FAILED) {
s1 = peg$parseWRAP();
if (s1 === peg$FAILED) {
s1 = peg$parseYEAR();
if (s1 === peg$FAILED) {
s1 = peg$parseYELLOW();
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseWS_NL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseoperators();
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperators(): any {
    let s0;

    s0 = peg$parseC_BRACES();
    if (s0 === peg$FAILED) {
      s0 = peg$parseC_BRACKET();
      if (s0 === peg$FAILED) {
        s0 = peg$parseC_PARENTHESIS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseO_BRACES();
          if (s0 === peg$FAILED) {
            s0 = peg$parseO_BRACKET();
            if (s0 === peg$FAILED) {
              s0 = peg$parseO_PARENTHESIS();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCOMMA();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseASTERISK();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseEQUAL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseLESS();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseGREATER();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseEXCLAMATION();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsePLUS();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseMINUS();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseCOLON();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseSLASH();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseAT_SIGN();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseDOUBLE_PIPE();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebuiltInVar(): any {
    let s0;

    s0 = peg$parseINT_FLAG();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNOT_FOUND();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQL_CODE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTATUS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseQUIT_FLAG();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQL_CA_RECORD();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSQL_ERR_M();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSQL_ERR_P();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSQL_ERR_D();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSQL_AWARN();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecomment(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsesingleComment();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseNL();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c8(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsePOUND();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsePOUND();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$currPos;
          peg$silentFails++;
          s8 = peg$parseNL();
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseNL();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = undefined;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseNL();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$parseMINUS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMINUS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePOUND();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$parseNL();
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = undefined;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s9 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parseNL();
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = undefined;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseNL();
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseO_BRACES();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseC_BRACES();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = undefined;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseC_BRACES();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = undefined;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = input.substring(s4, peg$currPos);
            } else {
              s4 = s5;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseC_BRACES();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseendLine(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWS();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWS();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesingleComment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingleComment(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsePOUND();
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$currPos;
      s7 = peg$currPos;
      peg$silentFails++;
      s8 = peg$parseNL();
      peg$silentFails--;
      if (s8 === peg$FAILED) {
        s7 = undefined;
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      if (s7 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s8 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        s7 = peg$currPos;
        peg$silentFails++;
        s8 = peg$parseNL();
        peg$silentFails--;
        if (s8 === peg$FAILED) {
          s7 = undefined;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsedouble_quoted_string();
    if (s2 === peg$FAILED) {
      s2 = peg$parsesingle_quoted_string();
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c13(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedouble_quoted_string(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseD_QUOTE();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseD_QUOTE();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseESCAPED();
        if (s6 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseD_QUOTE();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseESCAPED();
          if (s6 === peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseD_QUOTE();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsesingle_quoted_string(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseS_QUOTE();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseS_QUOTE();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseESCAPED();
        if (s6 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseS_QUOTE();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseESCAPED();
          if (s6 === peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseS_QUOTE();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenumber(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$c14.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseDIGIT();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseDIGIT();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parseDOT();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseDIGIT();
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseDIGIT();
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c16(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseESCAPED(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseWS(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c23.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c23.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c25(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNL(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (input.charCodeAt(peg$currPos) === 10) {
      s3 = peg$c26;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }
    if (s3 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 13) {
        s3 = peg$c28;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c30) {
          s3 = peg$c30;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
      }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c26;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c30) {
              s3 = peg$c30;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
          }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c32(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWS_NL(): any {
    let s0, s1;

    s0 = [];
    s1 = peg$parseWS();
    if (s1 === peg$FAILED) {
      s1 = peg$parseNL();
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWS();
        if (s1 === peg$FAILED) {
          s1 = peg$parseNL();
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDIGIT(): any {
    let s0;

    if (peg$c33.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseD_QUOTE(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseS_QUOTE(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c37;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }

    return s0;
  }

  function peg$parseDOT(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c39;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parseidentifer(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseID();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseDOT();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseASTERISK();
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c41(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseDOT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseID();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c41(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseID();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c41(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseID(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$c42.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (peg$c44.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseDOT();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s7 !== peg$FAILED) {
          s8 = [];
          if (peg$c44.test(input.charAt(peg$currPos))) {
            s9 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s9 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseDOT();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          if (peg$c42.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s9 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              if (peg$c44.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTRUE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c46) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFALSE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c49) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT_FLAG(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c51) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOT_FOUND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c54) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_CODE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTATUS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c58) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQUIT_FLAG(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c60) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c61); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_CA_RECORD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c62) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_ERR_M(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c64) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_ERR_P(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c66) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_ERR_D(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c68) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_AWARN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c70) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePOUND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c72;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAT_SIGN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c75;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXCLAMATION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c77;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOLON(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c79;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOUBLE_PIPE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseO_BRACES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c83;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseC_BRACES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c86;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c87); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseO_BRACKET(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c88;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseC_BRACKET(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 93) {
      s1 = peg$c91;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseO_PARENTHESIS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c93;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c94); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c95(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseC_PARENTHESIS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 41) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c95(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMA(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c98;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c100(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASTERISK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEQUAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c104;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLESS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c106;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGREATER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c108;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePLUS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c110;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMINUS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c112;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSLASH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c114;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c115); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseACCEPT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c116) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAFTER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c119) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseALL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c121) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c123) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c124); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseANY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c125) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseARRAY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c127) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASC(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c129) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASCENDING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c131) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASCII(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c133) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c135) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseATTRIBUTE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c137) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseATTRIBUTES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c139) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAUTONEXT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c141) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c142); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAVG(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c143) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBEFORE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c145) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBEGIN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c147) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c148); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBETWEEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c149) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBIGINT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c151) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLACK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c153) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLINK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c155) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLUE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c157) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBOLD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c159) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBORDER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c161) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBOTTOM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c163) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c165) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBYTE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c167) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c168); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCALL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c169) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCASE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c171) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c172); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCHAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c173) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCHARACTER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c175) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCLEAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c177) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCLIPPED(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c179) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c180); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCLOSE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c181) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOLUMN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c183) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOLUMNS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c185) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMAND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c187) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMENT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c189) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMENTS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c191) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMIT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c193) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCONSTRAINT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c195) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCONSTRUCT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c197) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCONTINUE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c199) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCONTROL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c201) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOUNT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c203) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCREATE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURRENT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c207) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURSOR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCYAN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c211) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c212); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATABASE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c213) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c215) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATETIME(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c217) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDAY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c219) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c220); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDEC(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c221) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDECIMAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c223) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c224); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDECLARE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c225) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c226); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDEFAULTS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDEFER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c229) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c230); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDEFINE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c231) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c232); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDELETE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c233) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDELIMITER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c235) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c236); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDELIMITERS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c237) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDESC(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c239) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDESCENDING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c241) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDIM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c243) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDIRTY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c245) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDISPLAY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c247) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c248); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDISTINCT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c249) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOUBLE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c251) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c252); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOWN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c253) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOWNSHIFT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c255) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDROP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c257) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c258); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDYNAMIC(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c259) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c260); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseELIF(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c261) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c262); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseELSE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c263) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c264); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c265) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c266); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseERROR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c267) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c268); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseESCAPE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c269) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c270); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEVERY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c271) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c272); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXCLUSIVE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c273) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c274); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXECUTE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c275) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c276); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXISTS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c278); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXIT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c279) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c280); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXTEND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c281) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c282); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXTERNAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c283) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c284); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFETCH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c285) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c286); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFIELD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c287) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c288); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFILE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c289) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c290); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFINISH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c291) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c292); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFIRST(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c293) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c294); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLOAT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c295) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c296); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLUSH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c297) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c298); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFOR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c299) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c300); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFOREACH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c301) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c302); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFORM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c303) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c304); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFORMAT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c305) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c306); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFORMONLY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c307) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c308); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFOUND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c309) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c310); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFRACTION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c311) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c312); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFREE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c313) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c314); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFROM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c315) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c316); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFUNCTION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c317) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c318); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGLOBALS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c319) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c320); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c321) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c322); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGOTO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c323) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c324); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGREEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c325) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c326); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGROUP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c327) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c328); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHAVING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c329) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c330); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHEADER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c331) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c332); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHELP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c333) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c334); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHIDE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c335) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c336); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHOLD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c337) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c338); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHOUR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c339) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c340); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIF(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c341) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c342); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c343) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c344); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINCLUDE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c345) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c346); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINDEX(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c347) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c348); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINITIALIZE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c349) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c350); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINPUT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c351) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c352); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINSERT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c353) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c354); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINSTRUCTIONS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c355) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c356); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c357) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c358); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTEGER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c359) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c360); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTERRUPT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c361) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c362); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTERVAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c363) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c364); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c365) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c366); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINVISIBLE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c367) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c368); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c369) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c370); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseISOLATION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c371) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c372); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseKEY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c373) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c374); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLABEL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c375) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c376); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLAST(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c377) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c378); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLEFT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c379) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c380); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLENGTH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c381) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c382); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLET(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c383) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c384); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLIKE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c385) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c386); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLINE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c387) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c388); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLINES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c389) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c390); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOAD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c391) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c392); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOCATE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c393) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c394); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOCK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c395) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c396); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOG(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c397) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c398); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAGENTA(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c399) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c400); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAIN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c401) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c402); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMARGIN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c403) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c404); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMATCHES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c405) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c406); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAX(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c407) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c408); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMDY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c409) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c410); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMEMORY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c411) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c412); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMENU(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c413) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c414); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMESSAGE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c415) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c416); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c417) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c418); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMINUTE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c419) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c420); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMOD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c421) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c422); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMODE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c423) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c424); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMONEY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c425) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c426); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMONTH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c427) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c428); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNAME(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c429) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c430); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNCHAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c431) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c432); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNEED(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c433) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c434); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNEXT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c435) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c436); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c437) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c438); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOENTRY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c439) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c440); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNORMAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c441) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c442); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c443) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c444); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOTFOUND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c54) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNULL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c445) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c446); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNUMERIC(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c447) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c448); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNVARCHAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c449) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c450); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOF(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c451) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c452); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOFF(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c453) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c454); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseON(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c455) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c456); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOPEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c457) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c458); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOPTION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c459) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c460); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOPTIONS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c461) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c462); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c463) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c464); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseORDER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c465) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c466); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOTHERWISE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c467) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c468); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOUTER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c469) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c470); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOUTPUT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c471) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c472); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePAGE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c473) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c474); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePAGENO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c475) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c476); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePIPE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c478); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePRECISION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c479) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c480); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePREPARE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c481) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c482); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePREVIOUS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c483) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c484); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePRIMARY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c485) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c486); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePRINT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c487) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c488); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePROGRAM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c489) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c490); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePROMPT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c491) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c492); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePUT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c493) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c494); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQUIT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c495) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c496); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREAD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c497) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c498); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREAL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c499) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c500); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRECORD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c501) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c502); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRED(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c503) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c504); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREPORT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c505) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c506); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRETURN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c507) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c508); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRETURNING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c509) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c510); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREVERSE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c511) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c512); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRIGTH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c513) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c514); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseROLLBACK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c515) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c516); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseROW(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c517) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c518); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseROWS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c519) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c520); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRUN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c521) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c522); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSCREEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c523) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c524); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSCROLL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c525) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c526); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSECOND(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c527) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c528); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSELECT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c529) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c530); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSET(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c531) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c532); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSHARE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c533) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c534); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSHOW(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c535) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c536); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSKIP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c537) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c538); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSLEEP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c539) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c540); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSMALL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c541) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSMALLFLOAT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c543) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c544); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSMALLINT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c545) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c546); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSPACE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c547) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c548); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSPACES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c549) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c550); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c551) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c552); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQLERROR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c553) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c554); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQLWARNING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c555) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c556); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTART(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c557) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c558); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTEP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c559) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c560); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTOP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c561) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c562); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTRING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c563) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c564); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUM(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c565) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c566); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTABLE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c567) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c568); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTABLES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c569) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c570); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTEMP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c571) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c572); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTEXT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c573) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c574); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTHEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c575) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c576); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTHROUGH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c577) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c578); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTHRU(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c579) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c580); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTIME(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c581) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c582); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTO(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c583) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c584); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTODAY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c585) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c586); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTOP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c587) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c588); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTRAILER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c589) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c590); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTYPE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c591) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c592); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNCONSTRAINED(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c593) {
      s1 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c594); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNDERLINE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c595) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c596); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNION(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c597) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c598); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNIQUE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c599) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c600); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNITS(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c601) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c602); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNLOAD(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c603) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c604); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNLOCK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c605) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c606); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c607) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c608); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUPDATE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c609) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c610); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUPSHIFT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c611) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c612); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUSING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c613) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c614); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVALIDATE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c615) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c616); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVALUES(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c617) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c618); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVARCHAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c619) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c620); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWAIT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c621) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c622); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWAITING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c623) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c624); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWARNING(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c625) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c626); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWEEKDAY(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c627) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c628); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHEN(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c629) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c630); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHENEVER(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c631) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c632); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHERE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c633) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c634); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHILE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c635) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c636); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHITE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c637) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c638); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWINDOW(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c639) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c640); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWITH(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c641) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c642); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWITHOUT(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c643) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c644); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWORDWRAP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c645) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c646); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWORK(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c647) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c648); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWRAP(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c649) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c650); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseYEAR(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c135) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseYELLOW(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c651) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c652); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }



  const ast = options.util.makeAST(location, options);



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

